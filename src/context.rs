use tokio::runtime::Runtime;
use jsonwebtokens_cognito::{Error, KeySet};





async fn check_auth() -> Result<AuthResult, Error> {
    let keyset = KeySet::new("us-west-2", "us-west-2_JIyd7gfYd")?;

    let verifier = keyset
        .new_id_token_verifier(&["76pmarb1rb17n3tctrdmsqv60e"])
        .build()?;

    let v = keyset.verify("eyJraWQiOiJsTFNSbXdNZzBweGdEd01tdVI2clROZnVPaTFRbEtpdHA2aDhnUlFKd1drPSIsImFsZyI6IlJTMjU2In0.eyJhdF9oYXNoIjoiMm5XX2RfWFZ1dUM4WU85RndESU83ZyIsInN1YiI6IjQ4MjM0ZTkwLWJkM2ItNDEwZi1iOTBlLWMxNjE2YjZiNjljMCIsImNvZ25pdG86Z3JvdXBzIjpbInVzLXdlc3QtMl9KSXlkN2dmWWRfR29vZ2xlIl0sImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwiaXNzIjoiaHR0cHM6XC9cL2NvZ25pdG8taWRwLnVzLXdlc3QtMi5hbWF6b25hd3MuY29tXC91cy13ZXN0LTJfSkl5ZDdnZllkIiwiY29nbml0bzp1c2VybmFtZSI6Imdvb2dsZV8xMDU5MDM3MjM1MTUxNDYxODAxODciLCJub25jZSI6Ii1VRmFGNV9veGZmdG9FSWtaeERuWk1KSzB6Y2NfMW55QUlGSFFXWERZdDVRZWNWb3BWSU92R0ZEMW5JU2YxSFRjUjdFcEg2WWxfanplYldsODhxVlg2a1p1YmdHRVMxS2pJbDNCSXZ2cTZROXBHR3VyUWlVeE1rb2c2cm9kdHR3VV9RbERWel9peDNqcEQyYmdVSDZhWDNaeDNkdVdPcDg2eEpiSHZ5N0xpQSIsImF1ZCI6Ijc2cG1hcmIxcmIxN24zdGN0cmRtc3F2NjBlIiwiaWRlbnRpdGllcyI6W3sidXNlcklkIjoiMTA1OTAzNzIzNTE1MTQ2MTgwMTg3IiwicHJvdmlkZXJOYW1lIjoiR29vZ2xlIiwicHJvdmlkZXJUeXBlIjoiR29vZ2xlIiwiaXNzdWVyIjpudWxsLCJwcmltYXJ5IjoidHJ1ZSIsImRhdGVDcmVhdGVkIjoiMTU5NDUyMDYwMjg4MCJ9XSwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE1OTgyMjIwODksIm5hbWUiOiJFdGhhbiBDaGVhdGhhbSIsImV4cCI6MTU5ODIyNTY4OSwiaWF0IjoxNTk4MjIyMDg5LCJlbWFpbCI6ImV0aGFud2NoZWF0aGFtQGdtYWlsLmNvbSJ9.aOFBU8jdgXHSu2WEjpuCUPopDGPTKor9dYtbVz2DXlVZP8R0XXb-Vni71HQrA0LtLKUoW2gsXoTWowA0DTwBebSa7YMX6fikQETwbt5C_TpP2UeoI-Mvg2uClP9pVwnVVJXHg_2-sHMpwAyGvL8PxH5_DBrPs2qhs-yaAm2diaVFccwP6BoDGrEZnqAsknKPFGelQbiEzi0YLecHWQMUZlPJn3lJ5F-C-rOZJqKz1Jxt0m6Y6s7Ybew7sA-POSu7KdXeyNkWP2OuHj8j6yoGpFTce15JDEAoKGGGvHMGVBuMdFIJvLb2sDvr4xYx6sfpsvUHw29sNWewd9Y1zRyCBA", 
    &verifier).await;

    let authentication = v.is_ok();

    let unauth = AuthResult {
        auth: false,
        user_id: "USER_UNAUTH".to_string(),
    };

    if authentication {
        // Sub is the uuid generated by amazon cognito pool
        let res = match v.unwrap().get("sub") {
            Some(x) => AuthResult {
                auth: authentication,
                user_id: x.to_string(),
            },
            None => unauth,
        };
        return Ok(res);
    }
    Ok(unauth)
}
/**
 * Database State neccesary for rocket, wrap db connection inside of it or whatever you want.
 */

#[derive(Clone)]
pub struct Context {
}

/**
 * Auth Result struct to wrap the auth result with userid for authenteication and authorization
 */
pub struct AuthResult {
    auth: bool,
    user_id: String,
}

impl Context {
    pub fn new() -> Context {
        Context {}
    }
    pub fn authorize(self, asdf: String) -> bool {
        "potato".to_string() == asdf
    }
    fn auth() -> AuthResult {
        let v = Runtime::new()
            .expect("Failed to create Tokio runtime")
            .block_on(check_auth())
            .expect("Authorization Check Failed!");
        println!("{}:{}", v.auth, v.user_id);
        v
    }
}